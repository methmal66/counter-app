{"version":3,"sources":["serviceWorker.js","Reducers/counters.js","Reducers/index.js","Components/Counter.js","Actions/index.js","Components/CounterList.js","Components/Navbar.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","init","id","value","title","counters","state","action","type","map","count","filter","reducers","combineReducers","Counter","useSelector","counter","dispatch","useDispatch","badge","Badge","badgeContent","color","face","size","className","Button","onClick","increment","variant","startIcon","decrement","remove","CounterList","counterElements","useStyles","makeStyles","root","position","display","alignItems","marginBottom","justifyContent","padding","backgroundColor","item","paddingTop","paddingBottom","marginRight","fontSize","Navbar","totalItems","classes","marginLeft","App","Fragment","length","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5bee2b2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const init = [\r\n  { id: 0, value: 0, title: \"milk\" },\r\n  { id: 1, value: 1, title: \"eggs\" },\r\n  { id: 2, value: 5, title: \"bread\" },\r\n  { id: 3, value: 1, title: \"cookie\" },\r\n  { id: 4, value: 10, title: \"chocolate\" },\r\n];\r\n\r\nconst counters = (state = init, action) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      return state.map((count) => {\r\n        if (count.id === action.id) {\r\n          count.value++;\r\n        }\r\n        return count;\r\n      });\r\n\r\n    case \"DECREMENT\":\r\n      return state.map((count) => {\r\n        if (count.id === action.id && count.value !== 0) {\r\n          count.value--;\r\n        }\r\n        return count;\r\n      });\r\n\r\n    case \"RESET\":\r\n      return state.map((count) => {\r\n        count.value = 0;\r\n        return count;\r\n      });\r\n\r\n    case \"REMOVE\":\r\n      return state.filter((count) => count.id !== action.id);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default counters;\r\n","import counters from \"./counters\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst reducers = combineReducers({\r\n  counters,\r\n});\r\n\r\nexport default reducers;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { increment, decrement, remove } from \"../Actions\";\r\n\r\nconst Counter = ({ id }) => {\r\n  const { value, title } = useSelector((state) => {\r\n    const counter = state.counters.filter((counter) => counter.id === id)[0];\r\n    const value = counter.value;\r\n    const title = counter.title;\r\n    return { value, title };\r\n  });\r\n  const dispatch = useDispatch();\r\n\r\n  const badge = (\r\n    <Badge\r\n      badgeContent={value === 0 ? \"Zero\" : value}\r\n      color={value === 0 ? \"error\" : \"primary\"}\r\n    >\r\n      <font face=\"verdana\" size=\"6\">\r\n        <span>{title}</span>\r\n      </font>\r\n    </Badge>\r\n  );\r\n\r\n  return (\r\n    <div className=\"counter\">\r\n      <div className=\"item name\">{badge}</div>\r\n\r\n      <div>\r\n        <Button\r\n          onClick={() => dispatch(increment(id))}\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <Button\r\n          onClick={() => dispatch(decrement(id))}\r\n          variant=\"contained\"\r\n          startIcon={<RemoveIcon />}\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <Button\r\n          onClick={() => dispatch(remove(id))}\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          startIcon={<DeleteIcon />}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","export const increment = (id) => ({\r\n  type: \"INCREMENT\",\r\n  id,\r\n});\r\n\r\nexport const decrement = (id) => ({\r\n  type: \"DECREMENT\",\r\n  id,\r\n});\r\n\r\nexport const remove = (id) => ({\r\n  type: \"REMOVE\",\r\n  id,\r\n});\r\n\r\nexport const reset = () => ({\r\n  type: \"RESET\",\r\n});\r\n","import React from \"react\";\r\nimport Counter from \"./Counter\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { reset } from \"../Actions\";\r\n\r\nconst CounterList = () => {\r\n  const counters = useSelector((state) => state.counters);\r\n  const counterElements = counters.map(({ id, title }) => (\r\n    <Counter key={id} id={id} />\r\n  ));\r\n  const dispatch = useDispatch(reset());\r\n\r\n  return (\r\n    <div>\r\n      {counterElements}\r\n      <div>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          className=\"reset\"\r\n          onClick={() => dispatch(reset())}\r\n        >\r\n          Reset\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CounterList;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    position: \"relative\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    marginBottom: \"1rem\",\r\n    justifyContent: \"space-between\",\r\n    padding: \"0.5rem 1rem\",\r\n    color: \"rgba(0, 0, 0, 0.9)\",\r\n    backgroundColor: \"#f8f9fa !important\",\r\n  },\r\n  item: {\r\n    paddingTop: \"0.3125rem\",\r\n    paddingBottom: \"0.3125rem\",\r\n    marginRight: \"1rem\",\r\n    fontSize: \"1.25rem\",\r\n  },\r\n}));\r\n\r\nconst Navbar = ({ totalItems }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <nav className={classes.root}>\r\n      <span className={classes.item}>\r\n        <strong>Total items selected</strong>\r\n        <span> {totalItems}</span>\r\n      </span>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport CounterList from \"./Components/CounterList\";\r\nimport Navbar from \"./Components/Navbar\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    marginLeft: \"15rem\",\r\n  },\r\n}));\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n  const counters = useSelector((state) => state.counters);\r\n\r\n  const getTotalItems = () =>\r\n    counters.filter((counter) => counter.value !== 0).length;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Navbar totalItems={getTotalItems()} />\r\n      <div className={classes.root}>\r\n        <CounterList />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { createStore } from \"redux\";\r\nimport reducers from \"./Reducers\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}